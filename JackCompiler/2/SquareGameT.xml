<tokens>
<identifier> class </identifier>
<identifier> SquareGame </identifier>
<identifier> { </identifier>
<identifier> field </identifier>
<identifier> Square </identifier>
<identifier> square; </identifier>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> direction; </identifier>
<identifier> constructor </identifier>
<identifier> SquareGame </identifier>
<identifier> new() </identifier>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> square </identifier>
<identifier> = </identifier>
<identifier> Square.new(0, </identifier>
<integerConstant> 0, </integerConstant>
<integerConstant> 30); </integerConstant>
<identifier> let </identifier>
<identifier> direction </identifier>
<identifier> = </identifier>
<integerConstant> 0; </integerConstant>
<identifier> return </identifier>
<identifier> this; </identifier>
<identifier> } </identifier>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> dispose() </identifier>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.dispose(); </identifier>
<identifier> do </identifier>
<identifier> Memory.deAlloc(this); </identifier>
<identifier> return; </identifier>
<identifier> } </identifier>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> moveSquare() </identifier>
<identifier> { </identifier>
<identifier> if </identifier>
<identifier> (direction </identifier>
<identifier> = </identifier>
<integerConstant> 1) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.moveUp(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (direction </identifier>
<identifier> = </identifier>
<integerConstant> 2) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.moveDown(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (direction </identifier>
<identifier> = </identifier>
<integerConstant> 3) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.moveLeft(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (direction </identifier>
<identifier> = </identifier>
<integerConstant> 4) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.moveRight(); </identifier>
<identifier> } </identifier>
<identifier> do </identifier>
<identifier> Sys.wait(5); </identifier>
<identifier> return; </identifier>
<identifier> } </identifier>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> run() </identifier>
<identifier> { </identifier>
<identifier> var </identifier>
<identifier> char </identifier>
<identifier> key; </identifier>
<identifier> var </identifier>
<identifier> boolean </identifier>
<identifier> exit; </identifier>
<identifier> let </identifier>
<identifier> exit </identifier>
<identifier> = </identifier>
<identifier> false; </identifier>
<identifier> while </identifier>
<identifier> (~exit) </identifier>
<identifier> { </identifier>
<identifier> while </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 0) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> key </identifier>
<identifier> = </identifier>
<identifier> Keyboard.keyPressed(); </identifier>
<identifier> do </identifier>
<identifier> moveSquare(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 81) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> exit </identifier>
<identifier> = </identifier>
<identifier> true; </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 90) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.decSize(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 88) </integerConstant>
<identifier> { </identifier>
<identifier> do </identifier>
<identifier> square.incSize(); </identifier>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 131) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> direction </identifier>
<identifier> = </identifier>
<integerConstant> 1; </integerConstant>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 133) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> direction </identifier>
<identifier> = </identifier>
<integerConstant> 2; </integerConstant>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 130) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> direction </identifier>
<identifier> = </identifier>
<integerConstant> 3; </integerConstant>
<identifier> } </identifier>
<identifier> if </identifier>
<identifier> (key </identifier>
<identifier> = </identifier>
<integerConstant> 132) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> direction </identifier>
<identifier> = </identifier>
<integerConstant> 4; </integerConstant>
<identifier> } </identifier>
<identifier> while </identifier>
<identifier> (~(key </identifier>
<identifier> = </identifier>
<integerConstant> 0)) </integerConstant>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> key </identifier>
<identifier> = </identifier>
<identifier> Keyboard.keyPressed(); </identifier>
<identifier> do </identifier>
<identifier> moveSquare(); </identifier>
<identifier> } </identifier>
<identifier> } </identifier>
<identifier> return; </identifier>
<identifier> }} </identifier>
</tokens>
