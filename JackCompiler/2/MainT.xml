<tokens>
<identifier> class </identifier>
<identifier> Main </identifier>
<identifier> { </identifier>
<identifier> static </identifier>
<identifier> boolean </identifier>
<identifier> test; </identifier>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> main() </identifier>
<identifier> { </identifier>
<identifier> var </identifier>
<identifier> SquareGame </identifier>
<identifier> game; </identifier>
<identifier> let </identifier>
<identifier> game </identifier>
<identifier> = </identifier>
<identifier> SquareGame.new(); </identifier>
<identifier> do </identifier>
<identifier> game.run(); </identifier>
<identifier> do </identifier>
<identifier> game.dispose(); </identifier>
<identifier> return; </identifier>
<identifier> } </identifier>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> more() </identifier>
<identifier> { </identifier>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> i, </identifier>
<identifier> j; </identifier>
<identifier> var </identifier>
<identifier> String </identifier>
<identifier> s; </identifier>
<identifier> var </identifier>
<identifier> Array </identifier>
<identifier> a; </identifier>
<identifier> if </identifier>
<identifier> (false) </identifier>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> s </identifier>
<identifier> = </identifier>
<stringConstant> string constant </stringConstant>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> s </identifier>
<identifier> = </identifier>
<identifier> null; </identifier>
<identifier> let </identifier>
<identifier> a[1] </identifier>
<identifier> = </identifier>
<identifier> a[2]; </identifier>
<identifier> } </identifier>
<identifier> else </identifier>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> i </identifier>
<identifier> * </identifier>
<identifier> (-j); </identifier>
<identifier> let </identifier>
<identifier> j </identifier>
<identifier> = </identifier>
<identifier> j </identifier>
<identifier> / </identifier>
<identifier> (-2); </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> i </identifier>
<identifier> | </identifier>
<identifier> j; </identifier>
<identifier> } </identifier>
<identifier> return; </identifier>
<identifier> }} </identifier>
</tokens>
